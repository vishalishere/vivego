// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace vivego.Proto.Messages {

  /// <summary>Holder for reflection information generated from Protos.proto</summary>
  public static partial class ProtosReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtosReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQcm90b3MucHJvdG8SDHZpdmVnby5Qcm90bxoWUmVmZXJlbmNlL1Byb3Rv",
            "cy5wcm90byJGCgVBbGl2ZRIcCghBbGl2ZVBJRBgBIAEoCzIKLmFjdG9yLlBJ",
            "RBIQCghNZW1iZXJJZBgCIAEoBRINCgVLaW5kcxgDIAMoCUIYqgIVdml2ZWdv",
            "LlByb3RvLk1lc3NhZ2VzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.ProtosReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::vivego.Proto.Messages.Alive), global::vivego.Proto.Messages.Alive.Parser, new[]{ "AlivePID", "MemberId", "Kinds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Alive : pb::IMessage<Alive> {
    private static readonly pb::MessageParser<Alive> _parser = new pb::MessageParser<Alive>(() => new Alive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::vivego.Proto.Messages.ProtosReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alive(Alive other) : this() {
      AlivePID = other.alivePID_ != null ? other.AlivePID.Clone() : null;
      memberId_ = other.memberId_;
      kinds_ = other.kinds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alive Clone() {
      return new Alive(this);
    }

    /// <summary>Field number for the "AlivePID" field.</summary>
    public const int AlivePIDFieldNumber = 1;
    private global::Proto.PID alivePID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PID AlivePID {
      get { return alivePID_; }
      set {
        alivePID_ = value;
      }
    }

    /// <summary>Field number for the "MemberId" field.</summary>
    public const int MemberIdFieldNumber = 2;
    private int memberId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MemberId {
      get { return memberId_; }
      set {
        memberId_ = value;
      }
    }

    /// <summary>Field number for the "Kinds" field.</summary>
    public const int KindsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_kinds_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> kinds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Kinds {
      get { return kinds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AlivePID, other.AlivePID)) return false;
      if (MemberId != other.MemberId) return false;
      if(!kinds_.Equals(other.kinds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (alivePID_ != null) hash ^= AlivePID.GetHashCode();
      if (MemberId != 0) hash ^= MemberId.GetHashCode();
      hash ^= kinds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (alivePID_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AlivePID);
      }
      if (MemberId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MemberId);
      }
      kinds_.WriteTo(output, _repeated_kinds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (alivePID_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AlivePID);
      }
      if (MemberId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberId);
      }
      size += kinds_.CalculateSize(_repeated_kinds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alive other) {
      if (other == null) {
        return;
      }
      if (other.alivePID_ != null) {
        if (alivePID_ == null) {
          alivePID_ = new global::Proto.PID();
        }
        AlivePID.MergeFrom(other.AlivePID);
      }
      if (other.MemberId != 0) {
        MemberId = other.MemberId;
      }
      kinds_.Add(other.kinds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (alivePID_ == null) {
              alivePID_ = new global::Proto.PID();
            }
            input.ReadMessage(alivePID_);
            break;
          }
          case 16: {
            MemberId = input.ReadInt32();
            break;
          }
          case 26: {
            kinds_.AddEntriesFrom(input, _repeated_kinds_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
