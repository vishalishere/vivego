// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PublishSubscribe.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Vivego.PublishSubscribe.Grpc {
  public static partial class PubSub
  {
    static readonly string __ServiceName = "vivego.PublishSubscribe.Grpc.PubSub";

    static readonly grpc::Marshaller<global::Vivego.PublishSubscribe.Grpc.Subscription> __Marshaller_Subscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vivego.PublishSubscribe.Grpc.Subscription.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vivego.PublishSubscribe.Grpc.Message> __Marshaller_Message = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vivego.PublishSubscribe.Grpc.Message.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vivego.PublishSubscribe.Grpc.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vivego.PublishSubscribe.Grpc.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Vivego.PublishSubscribe.Grpc.Subscription, global::Vivego.PublishSubscribe.Grpc.Message> __Method_Listen = new grpc::Method<global::Vivego.PublishSubscribe.Grpc.Subscription, global::Vivego.PublishSubscribe.Grpc.Message>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Listen",
        __Marshaller_Subscription,
        __Marshaller_Message);

    static readonly grpc::Method<global::Vivego.PublishSubscribe.Grpc.Message, global::Vivego.PublishSubscribe.Grpc.Empty> __Method_Publish = new grpc::Method<global::Vivego.PublishSubscribe.Grpc.Message, global::Vivego.PublishSubscribe.Grpc.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Publish",
        __Marshaller_Message,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vivego.PublishSubscribe.Grpc.PublishSubscribeReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PubSub</summary>
    public abstract partial class PubSubBase
    {
      public virtual global::System.Threading.Tasks.Task Listen(global::Vivego.PublishSubscribe.Grpc.Subscription request, grpc::IServerStreamWriter<global::Vivego.PublishSubscribe.Grpc.Message> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Vivego.PublishSubscribe.Grpc.Empty> Publish(grpc::IAsyncStreamReader<global::Vivego.PublishSubscribe.Grpc.Message> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PubSub</summary>
    public partial class PubSubClient : grpc::ClientBase<PubSubClient>
    {
      /// <summary>Creates a new client for PubSub</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PubSubClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PubSub that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PubSubClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PubSubClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PubSubClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Vivego.PublishSubscribe.Grpc.Message> Listen(global::Vivego.PublishSubscribe.Grpc.Subscription request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Listen(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Vivego.PublishSubscribe.Grpc.Message> Listen(global::Vivego.PublishSubscribe.Grpc.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Listen, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::Vivego.PublishSubscribe.Grpc.Message, global::Vivego.PublishSubscribe.Grpc.Empty> Publish(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Publish(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Vivego.PublishSubscribe.Grpc.Message, global::Vivego.PublishSubscribe.Grpc.Empty> Publish(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Publish, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PubSubClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PubSubClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PubSubBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Listen, serviceImpl.Listen)
          .AddMethod(__Method_Publish, serviceImpl.Publish).Build();
    }

  }
}
#endregion
