// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protos.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace vivego.PublishSubscribe {
  public static partial class PubSubService
  {
    static readonly string __ServiceName = "vivego.Proto.PubSub.PubSubService";

    static readonly grpc::Marshaller<global::vivego.PublishSubscribe.Message> __Marshaller_Message = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::vivego.PublishSubscribe.Message.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::vivego.PublishSubscribe.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::vivego.PublishSubscribe.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::vivego.PublishSubscribe.Subscription> __Marshaller_Subscription = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::vivego.PublishSubscribe.Subscription.Parser.ParseFrom);

    static readonly grpc::Method<global::vivego.PublishSubscribe.Message, global::vivego.PublishSubscribe.Empty> __Method_Publish = new grpc::Method<global::vivego.PublishSubscribe.Message, global::vivego.PublishSubscribe.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Publish",
        __Marshaller_Message,
        __Marshaller_Empty);

    static readonly grpc::Method<global::vivego.PublishSubscribe.Subscription, global::vivego.PublishSubscribe.Message> __Method_Listen = new grpc::Method<global::vivego.PublishSubscribe.Subscription, global::vivego.PublishSubscribe.Message>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Listen",
        __Marshaller_Subscription,
        __Marshaller_Message);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::vivego.PublishSubscribe.ProtosReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PubSubService</summary>
    public abstract partial class PubSubServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::vivego.PublishSubscribe.Empty> Publish(grpc::IAsyncStreamReader<global::vivego.PublishSubscribe.Message> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Listen(global::vivego.PublishSubscribe.Subscription request, grpc::IServerStreamWriter<global::vivego.PublishSubscribe.Message> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PubSubService</summary>
    public partial class PubSubServiceClient : grpc::ClientBase<PubSubServiceClient>
    {
      /// <summary>Creates a new client for PubSubService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PubSubServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PubSubService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PubSubServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PubSubServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PubSubServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::vivego.PublishSubscribe.Message, global::vivego.PublishSubscribe.Empty> Publish(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Publish(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::vivego.PublishSubscribe.Message, global::vivego.PublishSubscribe.Empty> Publish(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Publish, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::vivego.PublishSubscribe.Message> Listen(global::vivego.PublishSubscribe.Subscription request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Listen(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::vivego.PublishSubscribe.Message> Listen(global::vivego.PublishSubscribe.Subscription request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Listen, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PubSubServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PubSubServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PubSubServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Publish, serviceImpl.Publish)
          .AddMethod(__Method_Listen, serviceImpl.Listen).Build();
    }

  }
}
#endregion
